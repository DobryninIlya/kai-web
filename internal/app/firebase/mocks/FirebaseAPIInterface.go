// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "firebase.google.com/go/auth"

	mock "github.com/stretchr/testify/mock"
)

// FirebaseAPIInterface is an autogenerated mock type for the FirebaseAPIInterface type
type FirebaseAPIInterface struct {
	mock.Mock
}

// GetFirebaseUser provides a mock function with given fields: ctx, uid
func (_m *FirebaseAPIInterface) GetFirebaseUser(ctx context.Context, uid string) (*auth.UserRecord, error) {
	ret := _m.Called(ctx, uid)

	var r0 *auth.UserRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.UserRecord, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.UserRecord); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFirebaseAPIInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewFirebaseAPIInterface creates a new instance of FirebaseAPIInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFirebaseAPIInterface(t mockConstructorTestingTNewFirebaseAPIInterface) *FirebaseAPIInterface {
	mock := &FirebaseAPIInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
