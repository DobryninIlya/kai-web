// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	sqlstore "main/internal/app/store/sqlstore"

	mock "github.com/stretchr/testify/mock"
)

// StoreInterface is an autogenerated mock type for the StoreInterface type
type StoreInterface struct {
	mock.Mock
}

// API provides a mock function with given fields:
func (_m *StoreInterface) API() sqlstore.ApiRepositoryInterface {
	ret := _m.Called()

	var r0 sqlstore.ApiRepositoryInterface
	if rf, ok := ret.Get(0).(func() sqlstore.ApiRepositoryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlstore.ApiRepositoryInterface)
		}
	}

	return r0
}

// Mail provides a mock function with given fields:
func (_m *StoreInterface) Mail() *sqlstore.MailingRepository {
	ret := _m.Called()

	var r0 *sqlstore.MailingRepository
	if rf, ok := ret.Get(0).(func() *sqlstore.MailingRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlstore.MailingRepository)
		}
	}

	return r0
}

// Schedule provides a mock function with given fields:
func (_m *StoreInterface) Schedule() *sqlstore.ScheduleRepository {
	ret := _m.Called()

	var r0 *sqlstore.ScheduleRepository
	if rf, ok := ret.Get(0).(func() *sqlstore.ScheduleRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlstore.ScheduleRepository)
		}
	}

	return r0
}

// Task provides a mock function with given fields:
func (_m *StoreInterface) Task() *sqlstore.TaskRepository {
	ret := _m.Called()

	var r0 *sqlstore.TaskRepository
	if rf, ok := ret.Get(0).(func() *sqlstore.TaskRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlstore.TaskRepository)
		}
	}

	return r0
}

// User provides a mock function with given fields:
func (_m *StoreInterface) User() *sqlstore.UserRepository {
	ret := _m.Called()

	var r0 *sqlstore.UserRepository
	if rf, ok := ret.Get(0).(func() *sqlstore.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlstore.UserRepository)
		}
	}

	return r0
}

// Verification provides a mock function with given fields:
func (_m *StoreInterface) Verification() *sqlstore.VerificationRepository {
	ret := _m.Called()

	var r0 *sqlstore.VerificationRepository
	if rf, ok := ret.Get(0).(func() *sqlstore.VerificationRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlstore.VerificationRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewStoreInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreInterface creates a new instance of StoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreInterface(t mockConstructorTestingTNewStoreInterface) *StoreInterface {
	mock := &StoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
